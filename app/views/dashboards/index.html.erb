<div class="mx-auto max-w-screen-2xl p-4 md:p-6 2xl:p-10">
  <div class="max-w-7xl mx-auto p-6">
    <div class="flex items-center justify-between mb-6">
      <h1 class="text-2xl font-bold">Credit Scores</h1>
      <%= link_to 'Create Attack', letters_path, class: "bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700" %>
    </div>
    <hr class="mb-6">
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      <div class="score-card">
        <div class="score-circle">
          <svg viewBox="0 0 100 100" class="w-full h-full">
            <circle class="text-gray-300" stroke-width="10" stroke="currentColor" fill="transparent" r="40" cx="50" cy="50" />
            <circle id="transunion-progress" class="text-red-500" stroke-width="10" stroke-dasharray="251.2" stroke-dashoffset="251.2" stroke-linecap="round" stroke="currentColor" fill="transparent" r="40" cx="50" cy="50" />
          </svg>
          <div id="transunion-score-text" class="score-text">0</div>
        </div>
        <p id="transunion-score-indicator" class="score-indicator">Import Credit Report</p>
        <p class="updated-date">Updated <%= @credit_report&.created_at&.strftime("%m/%d/%Y") %></p>
        <%= image_tag "transunion.png", width: "200", height: "200", class: "mx-auto mt-4"  %>
      </div>

      <div class="score-card">
        <div class="score-circle">
          <svg viewBox="0 0 100 100" class="w-full h-full">
            <circle class="text-gray-300" stroke-width="10" stroke="currentColor" fill="transparent" r="40" cx="50" cy="50" />
            <circle id="experian-progress" class="text-red-500" stroke-width="10" stroke-dasharray="251.2" stroke-dashoffset="251.2" stroke-linecap="round" stroke="currentColor" fill="transparent" r="40" cx="50" cy="50" />
          </svg>
          <div id="experian-score-text" class="score-text">0</div>
        </div>
        <p id="experian-score-indicator" class="score-indicator">Import Credit Report</p>
        <p class="updated-date">Updated <%= @credit_report&.created_at&.strftime("%m/%d/%Y") %></p>
         <%= image_tag "experian.png", width: "200", height: "200", class: "mx-auto mt-8"  %>
      </div>

      <div class="score-card flex flex-col items-center">
        <div class="score-circle">
          <svg viewBox="0 0 100 100" class="w-full h-full">
            <circle class="text-gray-300" stroke-width="10" stroke="currentColor" fill="transparent" r="40" cx="50" cy="50" />
            <circle id="equifax-progress" class="text-yellow-500" stroke-width="10" stroke-dasharray="251.2" stroke-dashoffset="251.2" stroke-linecap="round" stroke="currentColor" fill="transparent" r="40" cx="50" cy="50" />
          </svg>
          <div id="equifax-score-text" class="score-text">0</div>
        </div>
        <p id="equifax-score-indicator" class="score-indicator sm:mt-4 md:mt-6">Import Credit Report</p>
        <p class="updated-date">Updated <%= @credit_report&.created_at&.strftime("%m/%d/%Y") %></p>
        <%= image_tag "equifax.png", width: "200", height: "200", class: "mx-auto mt-8" %>
      </div>
    </div>
    
    <br>
    <!-- New Section -->
    <div class="mt-8">
      <h2 class="text-xl font-semibold mb-6">Credit Summary</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <div class="flex flex-col items-center justify-between border p-4 rounded-lg shadow-md bg-white">
          <div class="flex flex-col items-center">
            <div class="text-md font-medium font-semibold text-gray-700 py-4">Open Accounts</div>
            <div class="text-3xl font-semibold text-gray-900"><%= @accounts.count %></div>
          </div>
          <div class="mt-4 pb-6">
            <%= link_to 'Take Action', letters_path, class: "px-6 py-3 font-medium rounded-lg transition duration-300 #{ 'bg-gray-400 text-white cursor-not-allowed' if @accounts.count.zero? } #{ 'custom-blue text-white hover:bg-blue-700' unless @accounts.count.zero? }", disabled: @accounts.count.zero? %>
          </div>
        </div>

        <div class="flex flex-col items-center justify-between border p-4 rounded-lg shadow-md bg-white">
          <div class="flex flex-col items-center">
            <div class="text-md font-medium font-semibold text-gray-700 py-4">Hard Inquiries</div>
            <div class="text-3xl font-semibold text-red-500"><%= @inquiries.count %></div>
          </div>
          <div class="mt-4 pb-6">
            <%= link_to 'Take Action', letters_path, class: "px-6 py-3 font-medium rounded-lg transition duration-300 #{ 'bg-gray-400 text-white cursor-not-allowed' if @inquiries.count.zero? } #{ 'custom-blue text-white hover:bg-blue-700' unless @inquiries.count.zero? }", disabled: @inquiries.count.zero? %>
          </div>
        </div>

        <div class="flex flex-col items-center justify-between border p-4 rounded-lg shadow-md bg-white">
          <div class="flex flex-col items-center">
            <div class="text-md font-medium font-semibold text-gray-700 py-4">Negative Accounts</div>
            <div class="text-3xl font-semibold text-red-500"><%= @negative_accounts.count %></div>
          </div>
          <div class="mt-4 pb-6">
            <%= link_to 'Take Action', letters_path, class: "px-6 py-3 font-medium rounded-lg transition duration-300 #{ 'bg-gray-400 text-white cursor-not-allowed' if @negative_accounts.count.zero? } #{ 'custom-blue text-white hover:bg-blue-700' unless @negative_accounts.count.zero? }", disabled: @negative_accounts.count.zero? %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="flex items-center justify-between mb-6 mt-6">
    <h1 class="text-2xl font-bold">Generated Letters</h1>
  </div>

  <div class="mt-8 flow-root">
    <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
      <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
          <table class="min-w-full divide-y divide-gray-300">
            <thead class="custom-blue md:bg-gray-50 rounded-t-lg shadow-lg">
              <tr>
                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-white md:text-gray-900 sm:pl-6">Name</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white md:text-gray-900">File Count</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white md:text-gray-900">Created At</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white md:text-gray-900"></th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white">
              <% @letters.each do |letter| %>
                <tr data-letter-id="<%= letter.id %>" data-total-pages="<%= letter.total_pages %>" data-experian-pdf="<%= letter.experian_pdf.attached? %>" data-transunion-pdf="<%= letter.transunion_pdf.attached? %>" data-equifax-pdf="<%= letter.equifax_pdf.attached? %>">
                  <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6"><%= letter.name %></td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"><%= [letter.experian_pdf, letter.transunion_pdf, letter.equifax_pdf].compact.count %></td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"><%= letter.created_at.strftime("%m/%d/%Y") %></td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <div class="flex flex-col sm:flex-row sm:justify-end items-start sm:items-center">
                      <button class="text-white bg-black px-4 py-2 rounded hover:bg-opacity-90 mb-2 sm:mb-0 sm:mr-2" onclick="downloadAllFiles('<%= letter.id %>')">Download All Files</button>
                      <% if letter.mailed? %>
                        <div class="text-green-500 sm:ml-4 mb-2 sm:mb-0">Mailed</div>
                        <div class="text-gray-500 sm:ml-4 mb-2 sm:mb-0">
                          Tracking Numbers:
                          <ul>
                            <% if letter.experian_tracking_number.present? %>
                              <li>Experian: <%= letter.experian_tracking_number %></li>
                            <% end %>
                            <% if letter.transunion_tracking_number.present? %>
                              <li>TransUnion: <%= letter.transunion_tracking_number %></li>
                            <% end %>
                            <% if letter.equifax_tracking_number.present? %>
                              <li>Equifax: <%= letter.equifax_tracking_number %></li>
                            <% end %>
                          </ul>
                        </div>
                      <% else %>
                        <button class="text-white bg-blue-500 px-4 py-2 rounded hover:bg-blue-600 sm:ml-2" onclick="showMailModal('<%= letter.id %>')">Mail</button>
                      <% end %>
                    </div>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
          <div class="px-4 py-3 bg-gray-50 text-right sm:px-6">
            <%= paginate @letters %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="mailModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden transition-opacity duration-300 ease-out">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full transform transition-transform duration-300 ease-out scale-95">
      <h2 class="text-xl font-semibold mb-4">Choose Mailing Option</h2>
      <p class="mb-4">Please choose between black and white or color mailing for the letter.</p>
      <p class="mb-4">All correspondence is sent via USPS Certified Mail with tracking provided. Recipients are required to sign upon delivery to confirm receipt.</p>
      <div class="flex justify-between mb-4">
        <div>
          <p>Black & White</p>
          <p id="bwCost" class="font-semibold"></p>
        </div>
        <div>
          <p>Color</p>
          <p id="colorCost" class="font-semibold"></p>
        </div>
      </div>
      <div class="flex justify-end">
        <button id="mailBWButton" class="px-4 py-2 bg-blue-500 text-white rounded mr-2 hover:bg-blue-600">Mail B&W</button>
        <button id="mailColorButton" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Mail Color</button>
      </div>
      <button class="absolute top-2 right-2 text-gray-500 hover:text-gray-700" onclick="closeMailModal()">&times;</button>
    </div>
  </div>
</div>


<script>
document.addEventListener("turbolinks:load", function() {
  initializeCreateAttackDropdown();
  initializeMailModal();
  fetchAndDisplayScores();
});

function getColorAndLabel(score) {
  const scoreRanges = [
    { min: 300, max: 579, label: 'Poor', color: 'text-red-500' },
    { min: 580, max: 669, label: 'Fair', color: 'text-yellow-500' },
    { min: 670, max: 739, label: 'Good', color: 'text-green-600' },
    { min: 740, max: 799, label: 'Very Good', color: 'text-green-600' },
    { min: 800, max: 850, label: 'Excellent', color: 'text-green-600' }
  ];

  for (let range of scoreRanges) {
    if (score >= range.min && score <= range.max) {
      return { color: range.color, label: range.label };
    }
  }
  return { color: 'text-gray-500', label: 'Unknown' };
}

function updateScoreUI(prefix, score, color, label) {
  const scoreText = document.getElementById(`${prefix}-score-text`);
  const scoreCircle = document.getElementById(`${prefix}-progress`);
  scoreText.textContent = score;
  scoreCircle.className = ''; // Reset class names
  scoreCircle.classList.add('stroke-current', color);
  scoreText.parentElement.nextElementSibling.textContent = label;
  setProgress(`${prefix}-progress`, score, 850);
}

function setProgress(elementId, score, maxScore = 850) {
  const element = document.getElementById(elementId);
  const percent = (score / maxScore) * 100;
  const dashOffset = 251.2 - (percent / 100) * 251.2;

  element.style.strokeDashoffset = dashOffset;

  // Animate the strokeDashoffset
  element.animate([
    { strokeDashoffset: 251.2 },
    { strokeDashoffset: dashOffset }
  ], {
    duration: 2000,
    easing: 'ease-out',
    fill: 'forwards'
  });
}

async function fetchScores() {
  try {
    const response = await fetch('/credit_reports/scores');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching scores:', error);
    return { experian_score: 0, transunion_score: 0, equifax_score: 0 };
  }
}

function fetchAndDisplayScores() {
  fetchScores().then(scores => {
    if (scores.experian_score) {
      const { color, label } = getColorAndLabel(scores.experian_score);
      updateScoreUI('experian', scores.experian_score, color, label);
    }

    if (scores.transunion_score) {
      const { color, label } = getColorAndLabel(scores.transunion_score);
      updateScoreUI('transunion', scores.transunion_score, color, label);
    }

    if (scores.equifax_score) {
      const { color, label } = getColorAndLabel(scores.equifax_score);
      updateScoreUI('equifax', scores.equifax_score, color, label);
    }
  });
}

function initializeCreateAttackDropdown() {
  const attackButton = document.getElementById('create-attack-button');
  const attackDropdown = document.getElementById('attack-dropdown');
  const roundButtons = document.querySelectorAll('[data-round]');

  if (attackButton && attackDropdown) {
    attackButton.addEventListener('click', toggleDropdown);
    document.addEventListener('click', closeDropdownOnClickOutside);
  }

  roundButtons.forEach(button => {
    button.addEventListener('click', handleRoundButtonClick);
  });

  function toggleDropdown() {
    attackDropdown.classList.toggle('hidden');
  }

  function closeDropdownOnClickOutside(event) {
    if (!attackButton.contains(event.target) && !attackDropdown.contains(event.target)) {
      attackDropdown.classList.add('hidden');
    }
  }

  function handleRoundButtonClick() {
    const round = this.getAttribute('data-round');
    const freeAttacks = parseInt('<%= current_user.free_attack %>', 10);
    const credits = parseFloat('<%= current_user.credits %>');

    if (freeAttacks > 0 || credits >= 24.99) {
      createAttack(round);
    } else {
      alert("You don't have enough credits or free attacks. Please add credits.");
      window.location.href = '<%= maverick_payment_form_url %>';
    }
  }
}

function initializeMailModal() {
  window.downloadAllFiles = function(letterId) {
    const form = document.createElement('form');
    form.method = 'post';
    form.action = '<%= download_all_files_path %>';
    form.innerHTML = `
      <input type="hidden" name="letter_id" value="${letterId}">
      <input type="hidden" name="${document.querySelector('meta[name=csrf-param]').content}" value="${document.querySelector('meta[name=csrf-token]').content}">
    `;
    document.body.appendChild(form);
    form.submit();
  }

  window.showMailModal = function(letterId) {
    fetch(`/letters/${letterId}/calculate_cost?color=false`)
      .then(response => response.json())
      .then(data => {
        const bwCost = data.total_cost_bw.toFixed(2);
        const colorCost = data.total_cost_color.toFixed(2);

        document.getElementById('bwCost').textContent = `$${bwCost}`;
        document.getElementById('colorCost').textContent = `$${colorCost}`;

        document.getElementById('mailBWButton').setAttribute('onclick', `mailLetter('${letterId}', false)`);
        document.getElementById('mailColorButton').setAttribute('onclick', `mailLetter('${letterId}', true)`);

        const modal = document.getElementById('mailModal');
        modal.classList.remove('hidden');
        setTimeout(() => {
          modal.classList.remove('opacity-0', 'scale-95');
        }, 10);
      });
  }

  window.closeMailModal = function() {
    const modal = document.getElementById('mailModal');
    modal.classList.add('opacity-0', 'scale-95');
    setTimeout(() => {
      modal.classList.add('hidden');
    }, 300);
  }

  window.mailLetter = function(letterId, color) {
    const form = document.createElement('form');
    form.method = 'post';
    form.action = '<%= letter_mail_path(":letter_id") %>'.replace(':letter_id', letterId);
    form.innerHTML = `
      <input type="hidden" name="color" value="${color}">
      <input type="hidden" name="${document.querySelector('meta[name=csrf-param]').content}" value="${document.querySelector('meta[name=csrf-token]').content}">
    `;
    document.body.appendChild(form);
    form.submit();
  }
}

document.addEventListener("turbolinks:before-cache", function() {
  const attackButton = document.getElementById('create-attack-button');
  const attackDropdown = document.getElementById('attack-dropdown');
  const roundButtons = document.querySelectorAll('[data-round]');

  if (attackButton && attackDropdown) {
    attackButton.removeEventListener('click', toggleDropdown);
    document.removeEventListener('click', closeDropdownOnClickOutside);
  }

  roundButtons.forEach(button => {
    button.removeEventListener('click', handleRoundButtonClick);
  });
});
</script>