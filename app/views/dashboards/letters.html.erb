<div class="mx-auto max-w-screen-2xl p-4 md:p-6 2xl:p-10">
  <div class="sm:flex sm:items-center">
    <div class="sm:flex-auto">
      <h1 class="text-base font-semibold leading-6 text-gray-900">Challenge Letters</h1>
      <p class="mt-2 text-sm text-gray-700">A list of all the challenge letters including their name, file count, created date, and download options.</p>
    </div>
    <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none relative">
      <button type="button" class="block rounded-md custom-blue px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" id="create-attack-button">Create Attack</button>
      <div class="absolute right-0 mt-2 w-96 bg-white border border-gray-300 rounded shadow-lg hidden" id="attack-dropdown">
        <ul>
          <% (1..12).each do |round| %>
            <% phase_info = attack_phase_info(round) %>
            <li>
              <button class="block w-full px-4 py-2 text-left text-black hover:bg-gray-200" data-round="<%= round %>">
                <span class="flex items-center">
                  <span class="mr-2"><%= phase_info[:icon] %></span>
                  <span>
                    <strong><%= phase_info[:title] %></strong>
                    <br>
                    <small><%= phase_info[:description] %></small>
                  </span>
                </span>
              </button>
            </li>
          <% end %>
        </ul>
      </div>
    </div>
  </div>

  <div class="mt-8 flow-root">
    <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
      <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
          <table class="min-w-full divide-y divide-gray-300">
            <thead class="custom-blue md:bg-gray-50 rounded-t-lg shadow-lg">
              <tr>
                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-white md:text-gray-900 sm:pl-6">Name</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white md:text-gray-900">File Count</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white md:text-gray-900">Created At</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-white md:text-gray-900"></th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white">
              <% @letters.each do |letter| %>
                <tr data-letter-id="<%= letter.id %>" data-total-pages="<%= letter.total_pages %>" data-experian-pdf="<%= letter.experian_pdf.attached? %>" data-transunion-pdf="<%= letter.transunion_pdf.attached? %>" data-equifax-pdf="<%= letter.equifax_pdf.attached? %>">
                  <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6"><%= letter.name %></td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"><%= [letter.experian_pdf, letter.transunion_pdf, letter.equifax_pdf].compact.count %></td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"><%= letter.created_at.strftime("%m/%d/%Y") %></td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <div class="flex flex-col sm:flex-row sm:justify-end items-start sm:items-center">
                      <button class="text-white bg-black px-4 py-2 rounded hover:bg-opacity-90 mb-2 sm:mb-0 sm:mr-2" onclick="downloadAllFiles('<%= letter.id %>')">Download All Files</button>
                      <% if letter.mailed? %>
                        <div class="text-green-500 sm:ml-4 mb-2 sm:mb-0">Mailed</div>
                        <div class="text-gray-500 sm:ml-4 mb-2 sm:mb-0">
                          Tracking Numbers:
                          <ul>
                            <% if letter.experian_tracking_number.present? %>
                              <li>Experian: <%= letter.experian_tracking_number %></li>
                            <% end %>
                            <% if letter.transunion_tracking_number.present? %>
                              <li>TransUnion: <%= letter.transunion_tracking_number %></li>
                            <% end %>
                            <% if letter.equifax_tracking_number.present? %>
                              <li>Equifax: <%= letter.equifax_tracking_number %></li>
                            <% end %>
                          </ul>
                        </div>
                      <% else %>
                        <button class="text-white bg-blue-500 px-4 py-2 rounded hover:bg-blue-600 sm:ml-2" onclick="showMailModal('<%= letter.id %>')">Mail</button>
                      <% end %>
                    </div>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
          <div class="px-4 py-3 bg-gray-50 text-right sm:px-6">
            <%= paginate @letters %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="mailModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden opacity-0 scale-95 transition-opacity transition-transform duration-300 ease-out">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full transform transition-transform duration-300 ease-out scale-95">
      <h2 class="text-xl font-semibold mb-4">Choose Mailing Option</h2>
      <p class="mb-4">Please choose between black and white or color mailing for the letter.</p>
      <p class="mb-4">All correspondence is sent via USPS Certified Mail with tracking provided. Recipients are required to sign upon delivery to confirm receipt.</p>
      <div class="flex justify-between mb-4">
        <div>
          <p>Black & White</p>
          <p id="bwCost" class="font-semibold"></p>
        </div>
        <div>
          <p>Color</p>
          <p id="colorCost" class="font-semibold"></p>
        </div>
      </div>
      <div class="flex justify-end">
        <button id="mailBWButton" class="px-4 py-2 bg-blue-500 text-white rounded mr-2 hover:bg-blue-600">Mail B&W</button>
        <button id="mailColorButton" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Mail Color</button>
      </div>
      <button class="absolute top-2 right-2 text-gray-500 hover:text-gray-700" onclick="closeMailModal()">&times;</button>
    </div>
  </div>

  <div id="loading-overlay" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="text-white text-center">
      <div class="loader mb-4"></div>
      <p>Please wait while we calculate mailing prices...</p>
    </div>
  </div>
</div>


<script>
function initializeCreateAttackDropdown() {
  const attackButton = document.getElementById('create-attack-button');
  const attackDropdown = document.getElementById('attack-dropdown');
  const roundButtons = document.querySelectorAll('[data-round]');
  const loadingOverlay = document.getElementById('loading-overlay');

  if (attackButton && attackDropdown) {
    attackButton.addEventListener('click', toggleAttackDropdown);
    document.addEventListener('click', handleClickOutside);
    roundButtons.forEach(button => {
      button.addEventListener('click', handleRoundButtonClick);
    });
  }

  function toggleAttackDropdown() {
    attackDropdown.classList.remove('hidden');
    attackDropdown.classList.remove('show');
  }

  function handleClickOutside(event) {
    if (!attackButton.contains(event.target) && !attackDropdown.contains(event.target)) {
      attackDropdown.classList.remove('show');
      attackDropdown.classList.add('hidden');
    }
  }

  function handleRoundButtonClick() {
    const round = this.getAttribute('data-round');
    if (parseFloat('<%= current_user.credits %>') < 24.99) {
      alert("You don't have enough credits. Please add credits.");
      window.location.href = '<%= maverick_payment_form_url %>';
    } else {
      loadingOverlay.classList.add('show');
      createAttack(round);
    }
  }

  function createAttack(round) {
    const form = document.createElement('form');
    form.method = 'get';
    form.action = '<%= create_attack_path %>';
    form.innerHTML = `
      <input type="hidden" name="round" value="${round}">
      <input type="hidden" name="payment_success" value="true">
      <input type="hidden" name="${document.querySelector('meta[name=csrf-param]').content}" value="${document.querySelector('meta[name=csrf-token]').content}">
    `;
    document.body.appendChild(form);
    form.submit();
  }

  return function cleanup() {
    if (attackButton) {
      attackButton.removeEventListener('click', toggleAttackDropdown);
    }
    document.removeEventListener('click', handleClickOutside);
    roundButtons.forEach(button => {
      button.removeEventListener('click', handleRoundButtonClick);
    });
  };
}

function initializeMailModal() {
  const loadingOverlay = document.getElementById('loading-overlay');

  window.downloadAllFiles = function(letterId) {
    const form = document.createElement('form');
    form.method = 'post';
    form.action = '<%= download_all_files_path %>';
    form.innerHTML = `
      <input type="hidden" name="letter_id" value="${letterId}">
      <input type="hidden" name="${document.querySelector('meta[name=csrf-param]').content}" value="${document.querySelector('meta[name=csrf-token]').content}">
    `;
    document.body.appendChild(form);
    form.submit();
  };

  window.showMailModal = function(letterId) {
    loadingOverlay.classList.add('show');

    fetch(`/letters/${letterId}/calculate_cost?color=false`)
      .then(response => response.json())
      .then(data => {
        const bwCost = data.total_cost_bw.toFixed(2);
        const colorCost = data.total_cost_color.toFixed(2);

        document.getElementById('bwCost').textContent = `$${bwCost}`;
        document.getElementById('colorCost').textContent = `$${colorCost}`;

        document.getElementById('mailBWButton').setAttribute('onclick', `mailLetter('${letterId}', false)`);
        document.getElementById('mailColorButton').setAttribute('onclick', `mailLetter('${letterId}', true)`);
        loadingOverlay.classList.remove('show');
        loadingOverlay.classList.add('hidden');
        const modal = document.getElementById('mailModal');
        modal.classList.remove('hidden');
        setTimeout(() => {
          modal.classList.remove('opacity-0', 'scale-95');
        }, 10);

        loadingOverlay.classList.add('hidden'); // Hide the loading overlay
      });
  };

  window.closeMailModal = function() {
    const modal = document.getElementById('mailModal');
    modal.classList.add('opacity-0', 'scale-95');
    setTimeout(() => {
      modal.classList.add('hidden');
    }, 300);
  };

  window.mailLetter = function(letterId, color) {
    const form = document.createElement('form');
    form.method = 'post';
    form.action = '<%= letter_mail_path(":letter_id") %>'.replace(':letter_id', letterId);
    form.innerHTML = `
      <input type="hidden" name="color" value="${color}">
      <input type="hidden" name="${document.querySelector('meta[name=csrf-param]').content}" value="${document.querySelector('meta[name=csrf-token]').content}">
    `;
    document.body.appendChild(form);
    form.submit();
  };
}

document.addEventListener("turbolinks:load", function() {
  const cleanupCreateAttackDropdown = initializeCreateAttackDropdown();
  initializeMailModal();

  document.addEventListener("turbolinks:before-cache", function() {
    if (cleanupCreateAttackDropdown) {
      cleanupCreateAttackDropdown();
    }
  }, { once: true });
});
</script>
